{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { listCards } from \"../utils/api\";\nexport default function Study({\n  decks\n}) {\n  const [cards, setCards] = useState([]);\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    async function getCards() {\n      const cardsFromAPI = await listCards(deckId);\n      setCards(cardsFromAPI);\n    }\n\n    getCards();\n  }, [deckId]); //    const deckName = decks.map(deck => (\n  //        cards.map(card => (<h2 key={card.id}>{card.deckId === deck.id ? `${deck.name}: Study`: \"\"} </h2>))\n  //    ));\n\n  const cardsInfo = cards.map;\n}","map":{"version":3,"sources":["/Users/ljcuriel/Thinkful/Flashcard_App/Project_Flashcards_Qualified_1/src/Layout/Study.jsx"],"names":["React","useEffect","useState","useParams","listCards","Study","decks","cards","setCards","deckId","getCards","cardsFromAPI","cardsInfo","map"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAyB;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAaN,SAAS,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,QAAf,GAAyB;AACrB,YAAMC,YAAY,GAAG,MAAMP,SAAS,CAACK,MAAD,CAApC;AACAD,MAAAA,QAAQ,CAACG,YAAD,CAAR;AACD;;AAEDD,IAAAA,QAAQ;AACb,GAPQ,EAOP,CAACD,MAAD,CAPO,CAAT,CAJoC,CAcxC;AACA;AACA;;AACE,QAAMG,SAAS,GAAGL,KAAK,CAACM,GAAxB;AAGD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { listCards } from \"../utils/api\"\n\nexport default function Study({ decks }){\n    const [cards, setCards] = useState([]);\n    const { deckId } = useParams();\n\n    useEffect(() => {\n        async function getCards(){\n            const cardsFromAPI = await listCards(deckId);\n            setCards(cardsFromAPI);\n          }\n         \n          getCards();\n    },[deckId]);\n\n \n//    const deckName = decks.map(deck => (\n//        cards.map(card => (<h2 key={card.id}>{card.deckId === deck.id ? `${deck.name}: Study`: \"\"} </h2>))\n//    ));\n  const cardsInfo = cards.map\n   \n    \n}"]},"metadata":{},"sourceType":"module"}